// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)

namespace protobuf_message_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void InitDefaultsStartGameRequestImpl();
void InitDefaultsStartGameRequest();
void InitDefaultsStartGameResponseImpl();
void InitDefaultsStartGameResponse();
void InitDefaultsRequestImpl();
void InitDefaultsRequest();
void InitDefaultsResponseImpl();
void InitDefaultsResponse();
void InitDefaultsMessageImpl();
void InitDefaultsMessage();
inline void InitDefaults() {
  InitDefaultsStartGameRequest();
  InitDefaultsStartGameResponse();
  InitDefaultsRequest();
  InitDefaultsResponse();
  InitDefaultsMessage();
}
}  // namespace protobuf_message_2eproto
namespace Game {
namespace PSR {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class Response;
class ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class StartGameRequest;
class StartGameRequestDefaultTypeInternal;
extern StartGameRequestDefaultTypeInternal _StartGameRequest_default_instance_;
class StartGameResponse;
class StartGameResponseDefaultTypeInternal;
extern StartGameResponseDefaultTypeInternal _StartGameResponse_default_instance_;
}  // namespace PSR
}  // namespace Game
namespace Game {
namespace PSR {

enum MSG {
  unknown_message = 0,
  Start_Game_Request = 11,
  Start_Game_Response = 21,
  MSG_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MSG_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MSG_IsValid(int value);
const MSG MSG_MIN = unknown_message;
const MSG MSG_MAX = Start_Game_Response;
const int MSG_ARRAYSIZE = MSG_MAX + 1;

// ===================================================================

class StartGameRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Game.PSR.StartGameRequest) */ {
 public:
  StartGameRequest();
  virtual ~StartGameRequest();

  StartGameRequest(const StartGameRequest& from);

  inline StartGameRequest& operator=(const StartGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartGameRequest(StartGameRequest&& from) noexcept
    : StartGameRequest() {
    *this = ::std::move(from);
  }

  inline StartGameRequest& operator=(StartGameRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const StartGameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartGameRequest* internal_default_instance() {
    return reinterpret_cast<const StartGameRequest*>(
               &_StartGameRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(StartGameRequest* other);
  friend void swap(StartGameRequest& a, StartGameRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartGameRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StartGameRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const StartGameRequest& from);
  void MergeFrom(const StartGameRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartGameRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Game.PSR.StartGameRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsStartGameRequestImpl();
};
// -------------------------------------------------------------------

class StartGameResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Game.PSR.StartGameResponse) */ {
 public:
  StartGameResponse();
  virtual ~StartGameResponse();

  StartGameResponse(const StartGameResponse& from);

  inline StartGameResponse& operator=(const StartGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartGameResponse(StartGameResponse&& from) noexcept
    : StartGameResponse() {
    *this = ::std::move(from);
  }

  inline StartGameResponse& operator=(StartGameResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const StartGameResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartGameResponse* internal_default_instance() {
    return reinterpret_cast<const StartGameResponse*>(
               &_StartGameResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(StartGameResponse* other);
  friend void swap(StartGameResponse& a, StartGameResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartGameResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StartGameResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const StartGameResponse& from);
  void MergeFrom(const StartGameResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartGameResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Game.PSR.StartGameResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsStartGameResponseImpl();
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Game.PSR.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const PROTOBUF_FINAL { return New(NULL); }

  Request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Game.PSR.StartGameRequest start = 11;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 11;
  const ::Game::PSR::StartGameRequest& start() const;
  ::Game::PSR::StartGameRequest* release_start();
  ::Game::PSR::StartGameRequest* mutable_start();
  void set_allocated_start(::Game::PSR::StartGameRequest* start);

  // @@protoc_insertion_point(class_scope:Game.PSR.Request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::Game::PSR::StartGameRequest* start_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsRequestImpl();
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Game.PSR.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(Response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Response* other);
  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Response* New() const PROTOBUF_FINAL { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .Game.PSR.StartGameResponse start = 11;
  bool has_start() const;
  void clear_start();
  static const int kStartFieldNumber = 11;
  const ::Game::PSR::StartGameResponse& start() const;
  ::Game::PSR::StartGameResponse* release_start();
  ::Game::PSR::StartGameResponse* mutable_start();
  void set_allocated_start(::Game::PSR::StartGameResponse* start);

  // @@protoc_insertion_point(class_scope:Game.PSR.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::Game::PSR::StartGameResponse* start_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsResponseImpl();
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Game.PSR.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const PROTOBUF_FINAL { return New(NULL); }

  Message* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string description = 3;
  void clear_description();
  static const int kDescriptionFieldNumber = 3;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // .Game.PSR.Request request = 6;
  bool has_request() const;
  void clear_request();
  static const int kRequestFieldNumber = 6;
  const ::Game::PSR::Request& request() const;
  ::Game::PSR::Request* release_request();
  ::Game::PSR::Request* mutable_request();
  void set_allocated_request(::Game::PSR::Request* request);

  // .Game.PSR.Response response = 7;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 7;
  const ::Game::PSR::Response& response() const;
  ::Game::PSR::Response* release_response();
  ::Game::PSR::Response* mutable_response();
  void set_allocated_response(::Game::PSR::Response* response);

  // .Game.PSR.MSG type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Game::PSR::MSG type() const;
  void set_type(::Game::PSR::MSG value);

  // fixed32 sequence = 2;
  void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  ::google::protobuf::uint32 sequence() const;
  void set_sequence(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Game.PSR.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::Game::PSR::Request* request_;
  ::Game::PSR::Response* response_;
  int type_;
  ::google::protobuf::uint32 sequence_;
  mutable int _cached_size_;
  friend struct ::protobuf_message_2eproto::TableStruct;
  friend void ::protobuf_message_2eproto::InitDefaultsMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartGameRequest

// -------------------------------------------------------------------

// StartGameResponse

// -------------------------------------------------------------------

// Request

// .Game.PSR.StartGameRequest start = 11;
inline bool Request::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
inline void Request::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
}
inline const ::Game::PSR::StartGameRequest& Request::start() const {
  const ::Game::PSR::StartGameRequest* p = start_;
  // @@protoc_insertion_point(field_get:Game.PSR.Request.start)
  return p != NULL ? *p : *reinterpret_cast<const ::Game::PSR::StartGameRequest*>(
      &::Game::PSR::_StartGameRequest_default_instance_);
}
inline ::Game::PSR::StartGameRequest* Request::release_start() {
  // @@protoc_insertion_point(field_release:Game.PSR.Request.start)
  
  ::Game::PSR::StartGameRequest* temp = start_;
  start_ = NULL;
  return temp;
}
inline ::Game::PSR::StartGameRequest* Request::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::Game::PSR::StartGameRequest;
  }
  // @@protoc_insertion_point(field_mutable:Game.PSR.Request.start)
  return start_;
}
inline void Request::set_allocated_start(::Game::PSR::StartGameRequest* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_;
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:Game.PSR.Request.start)
}

// -------------------------------------------------------------------

// Response

// .Game.PSR.StartGameResponse start = 11;
inline bool Response::has_start() const {
  return this != internal_default_instance() && start_ != NULL;
}
inline void Response::clear_start() {
  if (GetArenaNoVirtual() == NULL && start_ != NULL) {
    delete start_;
  }
  start_ = NULL;
}
inline const ::Game::PSR::StartGameResponse& Response::start() const {
  const ::Game::PSR::StartGameResponse* p = start_;
  // @@protoc_insertion_point(field_get:Game.PSR.Response.start)
  return p != NULL ? *p : *reinterpret_cast<const ::Game::PSR::StartGameResponse*>(
      &::Game::PSR::_StartGameResponse_default_instance_);
}
inline ::Game::PSR::StartGameResponse* Response::release_start() {
  // @@protoc_insertion_point(field_release:Game.PSR.Response.start)
  
  ::Game::PSR::StartGameResponse* temp = start_;
  start_ = NULL;
  return temp;
}
inline ::Game::PSR::StartGameResponse* Response::mutable_start() {
  
  if (start_ == NULL) {
    start_ = new ::Game::PSR::StartGameResponse;
  }
  // @@protoc_insertion_point(field_mutable:Game.PSR.Response.start)
  return start_;
}
inline void Response::set_allocated_start(::Game::PSR::StartGameResponse* start) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete start_;
  }
  if (start) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      start = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:Game.PSR.Response.start)
}

// -------------------------------------------------------------------

// Message

// .Game.PSR.MSG type = 1;
inline void Message::clear_type() {
  type_ = 0;
}
inline ::Game::PSR::MSG Message::type() const {
  // @@protoc_insertion_point(field_get:Game.PSR.Message.type)
  return static_cast< ::Game::PSR::MSG >(type_);
}
inline void Message::set_type(::Game::PSR::MSG value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Game.PSR.Message.type)
}

// fixed32 sequence = 2;
inline void Message::clear_sequence() {
  sequence_ = 0u;
}
inline ::google::protobuf::uint32 Message::sequence() const {
  // @@protoc_insertion_point(field_get:Game.PSR.Message.sequence)
  return sequence_;
}
inline void Message::set_sequence(::google::protobuf::uint32 value) {
  
  sequence_ = value;
  // @@protoc_insertion_point(field_set:Game.PSR.Message.sequence)
}

// string description = 3;
inline void Message::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Message::description() const {
  // @@protoc_insertion_point(field_get:Game.PSR.Message.description)
  return description_.GetNoArena();
}
inline void Message::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Game.PSR.Message.description)
}
#if LANG_CXX11
inline void Message::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Game.PSR.Message.description)
}
#endif
inline void Message::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Game.PSR.Message.description)
}
inline void Message::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Game.PSR.Message.description)
}
inline ::std::string* Message::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:Game.PSR.Message.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Message::release_description() {
  // @@protoc_insertion_point(field_release:Game.PSR.Message.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Message::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:Game.PSR.Message.description)
}

// .Game.PSR.Request request = 6;
inline bool Message::has_request() const {
  return this != internal_default_instance() && request_ != NULL;
}
inline void Message::clear_request() {
  if (GetArenaNoVirtual() == NULL && request_ != NULL) {
    delete request_;
  }
  request_ = NULL;
}
inline const ::Game::PSR::Request& Message::request() const {
  const ::Game::PSR::Request* p = request_;
  // @@protoc_insertion_point(field_get:Game.PSR.Message.request)
  return p != NULL ? *p : *reinterpret_cast<const ::Game::PSR::Request*>(
      &::Game::PSR::_Request_default_instance_);
}
inline ::Game::PSR::Request* Message::release_request() {
  // @@protoc_insertion_point(field_release:Game.PSR.Message.request)
  
  ::Game::PSR::Request* temp = request_;
  request_ = NULL;
  return temp;
}
inline ::Game::PSR::Request* Message::mutable_request() {
  
  if (request_ == NULL) {
    request_ = new ::Game::PSR::Request;
  }
  // @@protoc_insertion_point(field_mutable:Game.PSR.Message.request)
  return request_;
}
inline void Message::set_allocated_request(::Game::PSR::Request* request) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete request_;
  }
  if (request) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      request = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:Game.PSR.Message.request)
}

// .Game.PSR.Response response = 7;
inline bool Message::has_response() const {
  return this != internal_default_instance() && response_ != NULL;
}
inline void Message::clear_response() {
  if (GetArenaNoVirtual() == NULL && response_ != NULL) {
    delete response_;
  }
  response_ = NULL;
}
inline const ::Game::PSR::Response& Message::response() const {
  const ::Game::PSR::Response* p = response_;
  // @@protoc_insertion_point(field_get:Game.PSR.Message.response)
  return p != NULL ? *p : *reinterpret_cast<const ::Game::PSR::Response*>(
      &::Game::PSR::_Response_default_instance_);
}
inline ::Game::PSR::Response* Message::release_response() {
  // @@protoc_insertion_point(field_release:Game.PSR.Message.response)
  
  ::Game::PSR::Response* temp = response_;
  response_ = NULL;
  return temp;
}
inline ::Game::PSR::Response* Message::mutable_response() {
  
  if (response_ == NULL) {
    response_ = new ::Game::PSR::Response;
  }
  // @@protoc_insertion_point(field_mutable:Game.PSR.Message.response)
  return response_;
}
inline void Message::set_allocated_response(::Game::PSR::Response* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:Game.PSR.Message.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PSR
}  // namespace Game

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Game::PSR::MSG> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
